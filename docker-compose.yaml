services:

  version-store: # version store for nessie
    image: postgres
    hostname: version-store
    container_name: version-store
    environment:
      - POSTGRES_PASSWORD=admin123
      - POSTGRES_USER=admin
      - POSTGRES_DB=catalog_nessie
    ports:
      - '5433:5432'
    volumes:
      - ./volumes/catalog_nessie_db:/var/lib/postgresql/data
    networks:
      - datalake
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d catalog_nessie -U admin"]
      interval: 5s
      timeout: 5s
      retries: 5

  nessie: # catalog for iceberg
    image: ghcr.io/projectnessie/nessie
    container_name: nessie
    hostname: nessie
    environment:
      - nessie.version.store.type=JDBC2
      - nessie.version.store.persist.jdbc.datasource=postgresql
      - quarkus.datasource.postgresql.jdbc.url=jdbc:postgresql://version-store:5432/catalog_nessie
      - quarkus.datasource.postgresql.username=admin
      - quarkus.datasource.postgresql.password=admin123
      - nessie.catalog.default-warehouse=warehouse
      - nessie.catalog.warehouses.warehouse.location=s3://datalake/
      - nessie.catalog.service.s3.default-options.endpoint=http://minio:9000/
      - nessie.catalog.service.s3.default-options.access-key=urn:nessie-secret:quarkus:nessie.catalog.secrets.access-key
      - nessie.catalog.secrets.access-key.name=admin
      - nessie.catalog.secrets.access-key.secret=admin123
      - nessie.catalog.service.s3.default-options.region=us-east-1
      - nessie.server.authentication.enabled=false
    ports:
      - "19120:19120"
    networks:
      - datalake
    depends_on:
      - version-store
      - minio

  trino: # query engine
    image: 'trinodb/trino:latest'
    container_name: trino
    hostname: trino
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=admin123
      - AWS_REGION=us-east-1
    ports:
      - '8060:8060'
    volumes:
      - ./trino/etc:/etc/trino
    networks:
      - datalake
    depends_on:
      - nessie

  spark:
    image: spark-iceberg
    container_name: spark
    build: spark/
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=admin123
      - AWS_REGION=us-east-1
    volumes:
      - ./src:/src
      - ./spark/conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
    ports:
      - 8888:8888 # Spark notebook port
      - 7077:7077 # Spark port
      - 8061:8061 # Spark master web ui port
      - 8062:8062 # Spark worker web ui port
      - 10000:10000 # Thrift ODBC/JDBC port
      - 10009:10009 # Kyuubi JDBC port
      - 18080:18080 # Spark history web ui port
      - 9083:9083 # Metastore thrift
      # - 10099:10099 # Kyuubi web ui port
    networks:
      - datalake
      
  minio: # Storage
      hostname: minio
      image: 'minio/minio'
      container_name: minio
      ports:
        - '9000:9000'
        - '9001:9001'
      volumes:
        - ./volumes/minio:/data
      environment:
        - MINIO_ROOT_USER=admin
        - MINIO_ROOT_PASSWORD=admin123
      command: server /data --console-address ":9001"
      networks:
        - datalake
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
        interval: 5s
        timeout: 5s
        retries: 5
        
  mc: # minio client for creating default bucket 
    image: minio/mc
    container_name: mc
    hostname: mc
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=admin123
      - AWS_REGION=us-east-1
    networks:
      - datalake
    volumes:
      - ./minio/init_minio.sh:/init_minio.sh 
    entrypoint: ["/bin/sh", "-c", "/init_minio.sh"]
    depends_on:
      minio:
        condition: service_healthy

  cube:
    image: cubejs/cube
    container_name: cube
    hostname: cube
    volumes:
      - ./cube:/cube/conf
    ports:
      - 3000:3000 
      - 4000:4000
      - 3245:3245
    networks:
      - datalake
    depends_on:
      - trino

  metabase:
    container_name: metabase
    depends_on:
      - cube
      - trino
    hostname: metabase
    build: 
      context: ./metabase
    volumes:
      - ./metabase:/metabase-data
      - ./metabase/metabase-settings.yml:/metabase-settings.yml
    ports:
      - 3030:3030
    environment:
      - MB_DB_FILE=/metabase-data/metabase.db
      - MB_DB_TYPE=h2
      - MB_JETTY_PORT=3030
      - MB_ENCRYPTION_SECRET_KEY=thisisasecretkey!!
    networks:
      - datalake
  
networks:
  datalake:
    driver: bridge

